{
  "name": "Klarnaofflinesdk",
  "tagline": "",
  "body": "# Klarna Offline SDK\r\n\r\n**Library that integrates and utilizes the Klarna offline API**\r\n\r\nThe full API specs are avaliable at apiary -> http://docs.klarnaoffline.apiary.io/\r\n\r\n## Installing the SDK   \r\n\r\n```c#\r\nInstall-Package Mnording.Klarna.Offline\r\n```\r\n\r\n## Setting up the cart and config\r\n\r\nFirstly you create a config of the current culture, your currency, country, shared secret and store ID.\r\n```c#\r\nMerchantConfig config = MerchantConfig(CultureInfo.CurrentCulture, Currency.SEK, Country.SE, \"YOURSharedSECRET\", \"MERCHANT_ID\");\r\n```\r\nTo recieve your merchant ID and shared secret for your integration you will need to reach out to Klarna.  \r\n\r\nYou then create a cart, and populate it with items\r\n```c#\r\nCart cart = new Cart();  \r\ncart.addProduct(new CartRow(\"Prod1234\", \"New Shoes for you\", 1, 10000, 25));  \r\ncart.addProduct(new CartRow(\"Prod1233\", \"New purple for you\", 1, 10000, 25));\r\n```\r\nYou are also able to define discounts for the cart.\r\n```c# \r\ncart.addDiscount(new CartRow(\"discount-1\", \"Summer sales\", 1, -1000,25));\r\n```\r\n*Note:* Prices are entered with amount of cents. Meaning a product that costs 10 SEK, you must enter 1000.\r\n\r\n##  Creating the order\r\nFirst you send in the cart and config and an optional push url    \r\n\r\n**Use polling method**  \r\nBy only starting the order, you will receive a status url hosted by klarna that will communicate the order details once the customer has completed the purchase.\r\n\r\n ```c#\r\nOfflineOrder offlineOrder = new OfflineOrder(cart, config, \"terminal\", phone, \"Merchant_OrderReference\");\r\n ```\r\n**Use push url method** \r\nIf you define a status url, then order-data will be pushed to that url when customer has completed the purchase.\r\n\r\n```c#\r\nOfflineOrder offlineOrder = new OfflineOrder(cart, config, \"terminal\", phone, \"1\", new Uri(\"https://URLThatShouldReceiveOrderInformation.com\"));\r\n```\r\n\r\n**Create the order**  \r\nThe create call will create the actual KCO session and send out the SMS to the consumer\r\n```c#\r\nofflineOrder.Create();\r\n```\r\n\r\nIf you did not define your own status URL, Klarna will create one for you that you will use for polling the result of the transaction\r\n\r\n**Cancel ongoing order** \r\n```c#\r\nofflineOrder.Cancel();\r\n```\r\nNote: Order must have been created before you can cancel it.\r\n\r\n\r\n## Reading the customer details\r\n**Using polling method:**  \r\nIf you wanted Klarna to create a status url for you, you can use the url that is created on the order, to poll for information.\r\n```c#\r\nstring url = offlineOrder.GetStatusUrl();\r\n```\r\nThis url will timeout every 60 seconds and you will need to re-trigger it to check as long as the customer has not completed the purchase\r\n```c#\r\nOrderDetails details = offlineOrder.pollData(url);\r\n```\r\n\r\n**Using status url method**  \r\nIf you defined your own statusurl, Klarna will post data to that url. To read all order-data you can use the JsonConverter.\r\n```c#\r\nOrderDetails details =JsonConverter.GetOrderFromString(jsonString);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}